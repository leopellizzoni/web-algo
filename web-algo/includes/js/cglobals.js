/* jshint esversion: 6 */
// C COMPILER
var TKs = {
    "TKId": 1,
    "TKVoid": 2,
    "TKInt": 3,
    "TKFloat": 4,
    "TKDouble": 5,
    "TKIf": 6,
    "TKElse": 7,
    "TKDo": 8,
    "TKWhile": 9,
    "TKFor": 10,
    "TKBreak": 11,
    "TKReturn": 12,
    "TKCteDouble": 13,
    "TKCteInt": 14,
    "TKVirgula": 15,
    "TKPonto": 16,
    "TKDoisPontos": 17,
    "TKPontoEVirgula": 18,
    "TKAbreParenteses": 19,
    "TKFechaParenteses": 20,
    "TKAbreColchete": 21,
    "TKFechaColchete": 22,
    "TKAbreChaves": 23,
    "TKFechaChaves": 24,
    "TKDuploMais": 25,
    "TKMaisIgual": 26,
    "TKMais": 27,
    "TKDuploMenos": 28,
    "TKMenosIgual": 29,
    "TKMenos": 30,
    "TKMultIgual": 31,
    "TKMult": 32,
    "TKDivIgual": 33,
    "TKDiv": 34,
    "TKRestoIgual": 35,
    "TKResto": 36,
    "TKCompare": 37,
    "TKIgual": 38,
    "TKDiferent": 39,
    "TKLogicalNot": 40,
    "TKMenorIgual": 41,
    "TKMenor": 42,
    "TKMaiorIgual": 43,
    "TKMaior": 44,
    "TKLogicalAnd": 45,
    "TKLogicalOr": 46,
    "TKContinue": 47,
    "TKPrintf": 48,
    "TKScanf": 49,
    "TKStringStdio": 50,
    "TKEnderecoVariavel": 51,
    "TKDefine": 52,
    "TKStdioh": 53,
    "TKInclude": 54,
    "TKString": 55,
    "TKChar": 56,
    "TKMathh": 57,
};

// Palavras reservadas da linguagem
var reserved_words = {
    "void": TKs['TKVoid'],
    "int": TKs['TKInt'],
    "float": TKs['TKFloat'],
    "double": TKs['TKDouble'],
    "if": TKs['TKIf'],
    "else": TKs['TKElse'],
    "do": TKs['TKDo'],
    "while": TKs['TKWhile'],
    "for": TKs['TKFor'],
    "break": TKs['TKBreak'],
    "return": TKs['TKReturn'],
    "continue": TKs['TKContinue'],
    "printf": TKs["TKPrintf"],
    "scanf": TKs["TKScanf"],
    "end_reserved_words": TKs['TKId'],
    "char": TKs['TKChar'],
};

export var globalVarC = {
    code: '',
    count_column: 0,
    count_line: 1,
    count_column_last: 0,
    count_line_last: 1,
    caracter: null,
    code_position: -1,
    lexico: '',
    erro_lexico: false,
    dic_control: {
        encontrou_main: false,
        encontrou_expressao: false,
        msg_erro: '',
        msg_warning: '',
        printf: '',
        c3e: '',
        bibliotecas: {}
    },
    tabela_de_simbolos: [],
    obriga_return: false,
    achou_return: false,
    lista_parametros_func: [],
    instrucoes: [],
    tempCount: 0,
    labelCount: 0,
    identificador: '',
    flag_saida_escrita: true,
    empilha_operacao_aritmetica: [],
    TKs: TKs,
    reserved_words: reserved_words,
    lista_backtracking: [],
    dimensao: 0,
    index_escopo: 0,
    index_escopo_pai: 0,
    // LÉXICO //////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Identificadores começam com uma letra ou sublinhado, seguido de letras, números ou sublinhados
    regexIdentificador: /[a-zA-Z_]\w*/,
    // Expressão regular para identificar identificadores e números inteiros
    regexIdentificadorNumero: /[a-zA-Z_]\w*|\d+/,
    // REGEX PRINTF
    regexPrintf: /%([+-]?(?:\d+|\*)?(?:\.\d+|\.\*)?(?:hh|h|l|ll|L|z|j|t)?[diuoxXfFeEgGaAcspn%])/g,
    // Números inteiros
    regexNumero: /^-?\d+(\.\d+)?$/,
    regexNumeroInteiro: /^-?\d+$/,
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    lista_param_printf: [],
    // VM //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    vm_escopo: '',
    vm_escopo_pai: '',
    variaveis_vm: {},
    vm_escopos: {},
    parametros_chamadas_funcao: [],
    pilha_funcoes: [],
    vm_funcoes: [],
    verifica_vetor_matriz_numeral: true,
    continua: true,
    regexAscii: /^[\x00-\x7F]+$/,
    funcao_corrente: '',
    worker: '',
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
};